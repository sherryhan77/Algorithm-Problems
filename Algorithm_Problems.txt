#LC 21. Merge Two Sorted Lists
#python
# Iterative solution Time Complexity:O(n1 + n2) Space Complexity: O(1)
Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

#shorter version
class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0)
        curr = dummy
        while l1 and l2:
            if l1.val >= l2.val:
                curr.next = l2
                l2 = l2.next          
            else:
                curr.next = l1
                l1 = l1.next             
            curr = curr.next
        #l1 or l2 is the remaining part of the lists
        curr.next = l1 or l2
        return dummy.next

#python Recursive Solution Time Complexity O(n1+n2) Space complexity O(n1+n2)
class Solution:
    def mergeTwoLists(self, l1, l2):
        if not l1:
            return l2
        if not l2:
            return l1
        
        if l1.val > l2.val:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2
        else:
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1

